"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const error_handler_1 = require("../error-handler");
const auth_1 = require("../middlewares/auth");
const staffAuthController_1 = require("../controllers/auth/staff/staffAuthController");
const appAuthController_1 = require("../controllers/auth/owner/appAuthController");
const verificationController_1 = require("../controllers/auth/verificationController");
const outletController_1 = require("../controllers/outlet/outletController");
const planController_1 = require("../controllers/outlet/plans/planController");
const orderSessionController_1 = require("../controllers/outlet/order/orderSession/orderSessionController");
const pos_controller_1 = require("../controllers/auth/pos/pos-controller");
const authRoute = (0, express_1.Router)();
authRoute.post("/app-login", (0, error_handler_1.errorHandler)(appAuthController_1.OwnerLogin));
authRoute.post("/register-app-user", (0, error_handler_1.errorHandler)(appAuthController_1.registerOwner));
authRoute.post("/app-logout", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(appAuthController_1.AppLogout));
authRoute.get("/app-user", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(appAuthController_1.OwnerUser));
authRoute.get("/app-refresh-token", (0, error_handler_1.errorHandler)(appAuthController_1.AppUpdateAccessToken));
//staff
authRoute.get("/staff-user/:id/latest", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(staffAuthController_1.getLatestRecordByStaffId));
authRoute.post("/staff-check-in", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(staffAuthController_1.staffCheckIn));
authRoute.post("/staff-check-out", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(staffAuthController_1.staffCheckOut));
authRoute.post("/staff-login", (0, error_handler_1.errorHandler)(staffAuthController_1.StaffLogin));
authRoute.post("/pos-login", (0, error_handler_1.errorHandler)(pos_controller_1.StaffPOSLogin));
authRoute.post("/pos-logout", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(pos_controller_1.StaffPOSLogout));
authRoute.get("/pos-user", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(pos_controller_1.GetPOSUser));
authRoute.post("/staff-logout", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(staffAuthController_1.StaffLogout));
authRoute.get("/staff-user", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(staffAuthController_1.GetStaff));
authRoute.get("/staff-refresh-token", (0, error_handler_1.errorHandler)(staffAuthController_1.StaffUpdateAccessToken));
authRoute.get("/pos-refresh-token", (0, error_handler_1.errorHandler)(pos_controller_1.POSUpdateAccessToken));
authRoute.patch("/update-push-token", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(staffAuthController_1.updateStaffPushToken));
authRoute.post("/social-auth", (0, error_handler_1.errorHandler)(appAuthController_1.socialAuthLogin));
authRoute.get("/outlet/:userId", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(outletController_1.getMainOutlet));
authRoute.get("/get-user/:id", (0, error_handler_1.errorHandler)(appAuthController_1.getUserById));
authRoute.get("/get-user-info", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(appAuthController_1.getUserInfo));
authRoute.post("/create-2fa-confirmation", (0, error_handler_1.errorHandler)(appAuthController_1.createTwoFactorConfirmation));
authRoute.get("/get-2fa-user-confirmation/:userId", (0, error_handler_1.errorHandler)(appAuthController_1.get2FAConfirmationUser));
authRoute.delete("/delete-2fa/:id", (0, error_handler_1.errorHandler)(appAuthController_1.delete2FAConfirmation));
authRoute.get("/get-2fa-token-by-email/:email", (0, error_handler_1.errorHandler)(appAuthController_1.get2FATokenByEmail));
authRoute.get("/get-2fa-token-by-token/:token", (0, error_handler_1.errorHandler)(appAuthController_1.getTwoFactorTokenByToken));
authRoute.delete("/delete-2fa-token/:id", (0, error_handler_1.errorHandler)(appAuthController_1.twoFactorTokenDelete));
authRoute.post("/generate-2fa-token", (0, error_handler_1.errorHandler)(appAuthController_1.generateTwoFactorToken));
authRoute.get("/get-user-email/:email", (0, error_handler_1.errorHandler)(appAuthController_1.getUserByEmail));
authRoute.get("/generateVerificationToken/:email", (0, error_handler_1.errorHandler)(appAuthController_1.getVerificationToken));
authRoute.patch("/verify-email-user", (0, error_handler_1.errorHandler)(appAuthController_1.getUserByIdAndVerifyEmail));
//email
authRoute.get("/get-email-verification-user/:email", (0, error_handler_1.errorHandler)(verificationController_1.getVerificationTokenByEmail));
authRoute.get("/get-emailVerification-token/:token", (0, error_handler_1.errorHandler)(verificationController_1.getVerificationTokenByToken));
authRoute.patch("/update-verify-email-user", (0, error_handler_1.errorHandler)(verificationController_1.updateUserEmailVerification));
authRoute.delete("/delete-email-verification/:id", (0, error_handler_1.errorHandler)(verificationController_1.deleteVerificationToken));
authRoute.get("/get-all-plans", (0, error_handler_1.errorHandler)(planController_1.getAllPlans));
authRoute.post("/subscribe-splan", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(planController_1.buyPlan));
//password
authRoute.post("/get-password-by-token", (0, error_handler_1.errorHandler)(appAuthController_1.getPasswordResetTokenByToken));
authRoute.post("/get-password-by-email", (0, error_handler_1.errorHandler)(appAuthController_1.getPasswordResetTokenByEmail));
authRoute.patch("/update-password/:id", (0, error_handler_1.errorHandler)(appAuthController_1.updatePassword));
authRoute.delete("/delete-pasword-token/:id", (0, error_handler_1.errorHandler)(appAuthController_1.deletePasswordResetToken));
authRoute.post("/create-reset-password-token", (0, error_handler_1.errorHandler)(appAuthController_1.generatePasswordResetToken));
authRoute.post("/generate-pdf", (0, error_handler_1.errorHandler)(orderSessionController_1.generatePdfInvoice));
authRoute.patch("/update-proile/:userId", auth_1.isAuthMiddelware, (0, error_handler_1.errorHandler)(appAuthController_1.updateUserProfileDetails));
authRoute.post("/pos-user-check", (0, error_handler_1.errorHandler)(pos_controller_1.POSUserCheck));
exports.default = authRoute;
