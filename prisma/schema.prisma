// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum FranchiseModel {
  MASTER
  FRANCHISE
}

model Restaurant {
  id                    String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  imageUrl              String                     @default("https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cmVzdGF1cmFudHxlbnwwfHwwfHx8MA%3D%3D")
  adminId               String                     @db.ObjectId()
  outletType            OutletType                 @default(NONE)
  address               String?
  email                 String?
  phoneNo               String?
  restaurantName        String?
  GSTIN                 String?
  city                  String?
  state                 String?
  country               String?
  pincode               String?
  fcmToken              String?
  openTime              String?
  areaLat               String?
  areaLong              String?
  fssai                 String?
  franchiseModel        FranchiseModel             @default(MASTER)
  orderRadius           Int?
  deliveryFee           Float?
  packagingFee          Float?
  googlePlaceId         String?
  description           String?
  businessType          String?
  status                Boolean                    @default(false)
  closeTime             String?
  isDelivery            Boolean                    @default(false)
  isPickUp              Boolean                    @default(false)
  isDineIn              Boolean                    @default(false)
  onlinePortal          Boolean                    @default(false)
  businessModel         BusinessType               @default(INDIVIDUAL)
  siteId                String?                    @db.ObjectId
  site                  Site?                      @relation("SiteToRestaurants", fields: [siteId], references: [id])
  users                 User                       @relation("RestaurantToUsers", fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerAccess        CustomerRestaurantAccess[] @relation("RestaurantToCustomerAccess")
  assets                Assets[]                   @relation("RestaurantToAssets")
  categories            Category[]                 @relation("RestaurantToCategory")
  units                 Unit[]                     @relation("RestaurantToUnit")
  rawMaterialCategories RawMaterialCategory[]      @relation("RestaurantToRawCategory")
  variants              Variants[]                 @relation("RestaurantToVariants")
  addOns                AddOns[]                   @relation("RestaurantToAddOns")
  menu                  MenuItem[]                 @relation("RestaurantToMenu")
  menuVariansts         MenuItemVariant[]          @relation("RestaurantToMenuVariants")
  addOnVariants         AddOnVariants[]            @relation("RestaurantToAddOnVariants")
  rawMaterial           RawMaterial[]              @relation("RestaurantToRawMaterial")

  orders              Order[]                @relation("RestaurantToOrder")
  tables              Table[]                @relation("RestaurantToTable")
  staffs              Staff[]                @relation("RestaurantToStaffs")
  areas               Areas[]                @relation("RestaurantToAreas")
  vendors             Vendor[]               @relation("RestaurantToVendor")
  purchases           Purchase[]             @relation("RestaurantToPurchase")
  invoice             Invoice?               @relation("RestaurantToInvoice")
  razorpayInfo        RazorpayIntegration?   @relation("RestaurantToRazorapy")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  Areas               Areas[]
  integrations        Integration[]          @relation("RestaurantToIntegration")
  notifications       Notification[]         @relation("RestaurantToNotification")
  orderSession        OrderSession[]         @relation("RestaurantToOrderSession")
  ItemRecipes         ItemRecipe[]           @relation("RestaurantToRecepies")
  Invite              Invite[]
  userAccess          UserRestaurantAccess[] @relation("RestaurantToAccess")
  Expenses            Expenses[]             @relation("RestaurantToExpenses")
  Alert               Alert[]                @relation("RestaurantToAlert")
  Report              Report[]               @relation("RestaurantToReports")
  targetMetrics       TargetMetrics?
  cashRegisters       CashRegister[]         @relation("RestaurantToCashRegister")
  vendorCategories    VendorCategory[]       @relation("RestaurantToVendorCategory")
  printLocations      PrintLocation[]        @relation("RestaurantToPrintLocation")
  printers            Printer[]              @relation("RestaurantToPrinter")
  PrintDetails        PrintDetails?
  loyaltyProgram      LoyaltyProgram[]       @relation("RestaurantToLoyaltyProgram")
  campaigns           Campaign[]
  loyaltyTransactions LoyaltyTransaction[]

  @@index([siteId])
}

enum BusinessType {
  INDIVIDUAL
  FRANCHISE
}

model Invite {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  email        String     @unique
  status       String     @default("PENDING") // PENDING, ACCEPTED, REJECTED
  role         UserRole
  token        String
  expires      DateTime
  invitedBy    String     @db.ObjectId // adminId of the inviter
  accessType   String     @default("FULL_ACCESS") // FULL_ACCESS, CUSTOM_ACCESS
  permissions  String[]   @default([]) // Array of permission IDs
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  admin        User       @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
}

model RazorpayIntegration {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId      String     @unique @db.ObjectId
  restaurant        Restaurant @relation("RestaurantToRazorapy", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  acc_id            String?
  stakeholderId     String?
  productId         String?
  account_number    String?
  ifsc_code         String?
  activation_status String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Invoice {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToInvoice", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isGSTEnabled Boolean
  isPrefix     Boolean
  prefix       String?
  invoiceNo    Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([restaurantId])
}

enum Integrations {
  PHONEPE
  RAZORAPY
  ONLINEHUB
  ZOMATO
  SWIGGY
}

model Integration {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId        String       @db.ObjectId
  restaurant          Restaurant   @relation("RestaurantToIntegration", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name                Integrations
  description         String?
  logo                String?
  link                String?
  status              Boolean
  connected           Boolean
  phonePeAPIId        String?
  phonePeAPISecretKey String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  @@index([restaurantId])
}

enum SubscriptionPlan {
  FREETRIAL
  STARTER
  STANDARD
  PREMIUM
  PRO
  ENTERPRISE
}

enum OutletType {
  RESTAURANT
  HYBRIDKITCHEN
  EXPRESS
  BAKERY
  CAFE
  FOODTRUCK
  NONE
}

enum UserRole {
  ADMIN
  ACCOUNTANT
  MANAGER
  PARTNER
  CAPTAIN
  WAITER
  CHEF
  FRONTDESK
  SECURITY
  DISHWASHER
  OTHER
  HOUSEKEEPING
  CUSTOMER
}

enum StaffActive {
  ACTIVE
  UNACTIVE
}

model Staff {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  active           StaffActive       @default(ACTIVE)
  name             String
  email            String?
  emailVerified    Boolean?
  password         String?
  posAccess        Boolean           @default(false)
  primeAccess      Boolean           @default(false)
  image            String?
  phoneNo          String            @unique
  pushToken        String? // Expo push token for notifications
  role             UserRole
  restaurantId     String            @db.ObjectId
  restaurant       Restaurant        @relation("RestaurantToStaffs", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderSession     OrderSession[]
  orders           Order[]
  table            Table[]
  shift            Shift[]
  checkIns         CheckInRecord[]
  payroll          Payroll[]
  favoriteMenu     String[]
  assignedTables   String[]
  payFrequency     PayFrequency      @default(MONTHLY)
  allowances       Float?
  deductions       Float?
  salary           String
  joinedDate       DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cashRegisters    CashRegister[]    @relation("StaffToCashRegister")
  cashTransactions CashTransaction[] @relation("StaffToTransaction")

  @@index([restaurantId])
}

model Shift {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  staff       Staff       @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId     String      @db.ObjectId
  status      ShiftStatus
  shift       ShiftType
  shiftTiming String
  shiftDate   DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum ShiftStatus {
  ACTIVE
  INACTIVE
}

enum ShiftType {
  MORNING
  EVENING
  NIGHT
}

model CheckInRecord {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  staff        Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId      String        @db.ObjectId
  checkInTime  DateTime?
  checkOutTime DateTime?
  status       CheckInStatus @default(STALE)
  notes        String?
  registerId   String?       @db.ObjectId
  register     CashRegister? @relation("RegisterToCheckIn", fields: [registerId], references: [id])
  date         DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Payroll {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  staffId      String        @db.ObjectId
  staff        Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  allowances   Float?
  deductions   Float?
  bonus        Float?
  amountPaid   Float         @default(0)
  reason       String?
  payDate      DateTime      @default(now())
  status       PayrollStatus @default(PENDING)
  payFrequency PayFrequency
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([staffId])
}

enum PayrollStatus {
  COMPLETED
  PENDING
}

enum PayFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  DAILY
}

model User {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  name               String                 @default("Owner Name")
  email              String                 @unique
  phoneNo            String?
  role               UserRole               @default(ADMIN)
  emailVerified      DateTime?
  providerAccountId  String?
  image              String?
  pan                String?
  fcmToken           String?
  isFreeTrial        Boolean                @default(true)
  address            String?
  hashedPassword     String?
  isTwoFactorEnabled Boolean                @default(false)
  twoFactorEnabled   TwoFactorConfirmation?
  onboardingStatus   Boolean                @default(false)
  restaurant         Restaurant[]           @relation("RestaurantToUsers")
  onboarding         OnboardingStatus?
  createdAt          DateTime               @default(now())
  favItems           String[]               @default([])
  updatedAt          DateTime               @updatedAt
  billings           SubscriptionBilling[]  @relation("BillingToUsers")
  accounts           Account[]              @relation("AccountToUser")
  sites              Site[]
  orderSession       OrderSession[]
  Invite             Invite[]
  restaurants        UserRestaurantAccess[] @relation("UserToAccess")
  cashRegisters      CashRegister[]         @relation("UserToCashRegister")
  cashTransactions   CashTransaction[]      @relation("UserToTransaction")
}

model UserRestaurantAccess {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  restaurantId String     @db.ObjectId
  user         User       @relation("UserToAccess", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurant   Restaurant @relation("RestaurantToAccess", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         UserRole   @default(MANAGER) // Custom role for access control
  accessType   String     @default("FULL_ACCESS") // FULL_ACCESS or CUSTOM_ACCESS
  permissions  String[]   @default([]) // Array of permission IDs
  createdAt    DateTime   @default(now())
}

model SubscriptionBilling {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  userId           String           @db.ObjectId
  user             User             @relation("BillingToUsers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isSubscription   Boolean
  subscriptionPlan SubscriptionPlan
  planType         PlanType
  paidAmount       Int
  subscribedDate   DateTime
  validDate        DateTime
  paymentId        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId])
}

model Subsciption {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  amount            Int
  subscriptionPlan  SubscriptionPlan
  planType          PlanType
  minOutlet         String
  isPOS             Boolean
  numberOfPOSAccess String           @default("")
  isStaffPrime      Boolean
  isKOT             Boolean
  isPrinting        Boolean          @default(true)
  multiBilling      Boolean          @default(false)
  thirdPartyApps    Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum PlanType {
  MONTHLY
  ANNUALLY
}

model OnboardingStatus {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentStep    String
  restaurantData Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum RestaurantType {
  DINEIN
  DELIVERY
  TAKEAWAY
}

model Customer {
  id               String                     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  phoneNo          String                     @unique
  email            String?
  role             UserRole                   @default(CUSTOMER)
  emailVerified    DateTime?
  dob              DateTime?
  image            String?
  hashedPassword   String?
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  restaurantAccess CustomerRestaurantAccess[] @relation("CustomerToAccess")
}

// New model for customer-restaurant relationship
model CustomerRestaurantAccess {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  customerId          String               @db.ObjectId
  restaurantId        String               @db.ObjectId
  customer            Customer             @relation("CustomerToAccess", fields: [customerId], references: [id], onDelete: Cascade)
  restaurant          Restaurant           @relation("RestaurantToCustomerAccess", fields: [restaurantId], references: [id], onDelete: Cascade)
  // Additional fields for customer-restaurant relationship
  userType            RestaurantType?
  table               Table[]
  orderSession        OrderSession[]
  lastVisit           DateTime?
  totalOrders         Int                  @default(0)
  totalSpent          Float                @default(0)
  isFavorite          Boolean              @default(false)
  address             String?
  pincode             String?
  landmark            String?
  latitude            String?
  longitude           String?
  //loyalty
  loyaltyPrograms     CustomerLoyalty[]
  loyaltyTransactions LoyaltyTransaction[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([customerId, restaurantId])
  @@index([customerId])
  @@index([restaurantId])
}

enum LoyaltyProgramType {
  POINT_BASED
  LOGIN_BASED
  VISIT_BASED
  SPEND_BASED_TIERS
  REFERAL_BASED
  CASHBACK_WALLET_BASED
}

model LoyaltyProgram {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId       String             @db.ObjectId
  restaurant         Restaurant         @relation("RestaurantToLoyaltyProgram", fields: [restaurantId], references: [id], onDelete: Cascade)
  coinName           String             @default("Points")
  pogramName         String
  slug               String
  loyaltyProgramType LoyaltyProgramType
  status             Boolean            @default(true)
  programDescription String?

  expiryDays Int?

  pointsRatio               Float?
  minimumPointsToRedemption Float?

  visitRequiredForReward Float?
  visitCompletedReward   String?
  menuId                 String?   @db.ObjectId
  menuItem               MenuItem? @relation("LoyaltyRewardToMenuItem", fields: [menuId], references: [id], onDelete: Cascade)

  tiers Tier[]

  referrerReward Float?
  refereeReward  Float?

  cashBackPercentage  Float?
  minSpendForCashback Float?

  loginPoints             Float?
  loginPointsToRedemption Float?

  customerLoyalty CustomerLoyalty[] // Customers enrolled in this program
  transactions    LoyaltyTransaction[] // Transactions related to this program
  campaigns       Campaign[] // Campaigns for this program

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerLoyalty {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  enrollmentDate DateTime
  points         Float
  visits         Float
  currentTierId  String?   @db.ObjectId
  walletBalance  Float
  lifeTimePoints Float
  lifeTimeSpend  Float
  lastVisitDate  DateTime?

  restaurantCustomerId String                   @unique @db.ObjectId
  restuarantCustomer   CustomerRestaurantAccess @relation(fields: [restaurantCustomerId], references: [id], onDelete: Cascade)

  loyaltyProgramId String         @db.ObjectId
  loyaltyProgram   LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id], onDelete: Cascade)

  currentTier Tier? @relation(fields: [currentTierId], references: [id])
}

enum TierType {
  SILVER
  GOLD
  PLATINUM
}

model Tier {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      TierType
  threshold Float
  benefits  String
  color     String?

  discount Float?

  menuId   String?   @db.ObjectId
  menuItem MenuItem? @relation(fields: [menuId], references: [id], onDelete: Cascade)

  programId      String            @db.ObjectId
  loyaltyProgram LoyaltyProgram    @relation(fields: [programId], references: [id], onDelete: Cascade)
  customers      CustomerLoyalty[]
}

enum TransactionType {
  POINTS_EARNED
  POINTS_REDEEMED
  VISIT_RECORDED
  TIER_UPGRADE
  REFERRAL_BONUS
  CASHBACK_EARNED
  CASHBACK_REDEEMED
}

enum CampaignType {
  POINTS_MULTIPLIER
  BONUS_POINTS
  TIER_UPGRADE
  REFERRAL_BONUS
  BIRTHDAY_SPECIAL
}

model LoyaltyTransaction {
  id                   String                   @id @default(auto()) @map("_id") @db.ObjectId
  transactionDate      DateTime                 @default(now())
  type                 TransactionType
  //point-based
  points               Float?
  //visit-based
  visits               Float?
  //cashback
  amount               Float?
  description          String?
  restaurantId         String                   @db.ObjectId
  restaurant           Restaurant               @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantCustomerId String                   @db.ObjectId
  restaurantCustomers  CustomerRestaurantAccess @relation(fields: [restaurantCustomerId], references: [id], onDelete: Cascade)
  programId            String                   @db.ObjectId
  loyaltyProgram       LoyaltyProgram           @relation(fields: [programId], references: [id], onDelete: Cascade)
  campaignId           String?                  @db.ObjectId
  campaign             Campaign?                @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Campaign {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  campaignType   CampaignType
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean      @default(true)
  targetAudience String? //Description of target audience
  reward         String

  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  programId      String         @db.ObjectId
  loyaltyProgram LoyaltyProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  loyaltyTransactions LoyaltyTransaction[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation("AccountToUser", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Assets {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToAssets", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  label        String
  imageUrl     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}

model Category {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String     @db.ObjectId
  restaurant      Restaurant @relation("RestaurantToCategory", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name            String
  slug            String
  description     String?
  printLocationId String?    @db.ObjectId
  menuItems       MenuItem[] @relation("CategoryToMenu")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([restaurantId])
}

model RawMaterialCategory {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String        @db.ObjectId
  restaurant   Restaurant    @relation("RestaurantToRawCategory", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  slug         String
  shortName    String?
  ramMaterial  RawMaterial[] @relation("RawCategoryToRawMaterial")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([restaurantId])
}

model Unit {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId        String               @db.ObjectId
  restaurant          Restaurant           @relation("RestaurantToUnit", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name                String
  slug                String
  description         String?
  purchaseUnits       PurchaseItems[]      @relation("PurchaseItemToUnit")
  consumptionUnits    RawMaterial[]        @relation("UnitToConsumption")
  minimumStockUnits   RawMaterial[]        @relation("UnitToMinimumStock")
  vendorContractRates VendorContractRate[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  RecipeIngredient    RecipeIngredient[]

  @@index([restaurantId])
}

model RawMaterial {
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId          String               @db.ObjectId
  restaurant            Restaurant           @relation("RestaurantToRawMaterial", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId            String               @db.ObjectId
  rawMaterialCategory   RawMaterialCategory  @relation("RawCategoryToRawMaterial", fields: [categoryId], references: [id])
  consumptionUnitId     String               @db.ObjectId
  consumptionUnit       Unit                 @relation("UnitToConsumption", fields: [consumptionUnitId], references: [id])
  minimumStockLevelUnit String               @db.ObjectId
  minimumStockUnit      Unit                 @relation("UnitToMinimumStock", fields: [minimumStockLevelUnit], references: [id])
  // Basic fields
  name                  String
  slug                  String
  shortcode             String?
  currentStock          Float?
  minimumStockLevel     Float?
  conversionFactor      Float?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  purchasedPrice        Float?
  purchasedUnit         String?
  purchasedStock        Float?
  purchasedPricePerItem Float?
  lastPurchasedPrice    Float?
  activePurchaseId      String?
  purchaseItems         PurchaseItems[]      @relation("PurchaseItemToRawMaterial")
  RecipeIngredient      RecipeIngredient[]
  vendorContractRates   VendorContractRate[] @relation("RawMaterialToContractRate")

  @@index([consumptionUnitId])
  @@index([minimumStockLevelUnit])
  @@index([restaurantId])
  @@index([categoryId])
  @@index([consumptionUnitId, minimumStockLevelUnit])
}

model Areas {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToAreas", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  slug         String
  table        Table[]    @relation("AreasToTable")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
}

enum FoodRole {
  VEG
  NONVEG
  EGG
  SOFTDRINKS
  ALCOHOL
  NONALCOHOLIC
  MILK
  FISH
  NOTAPPLICABLE
}

model MenuItem {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId     String            @db.ObjectId
  restaurant       Restaurant        @relation("RestaurantToMenu", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId       String            @db.ObjectId
  category         Category          @relation("CategoryToMenu", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isFeatured       Boolean?          @default(false)
  isArchived       Boolean?          @default(false)
  isInStock        Boolean?          @default(true)
  isUpSale         Boolean?          @default(false)
  name             String
  slug             String
  onlineName       String?
  shortCode        String?
  description      String?
  isVariants       Boolean           @default(false)
  menuItemVariants MenuItemVariant[]
  isAddons         Boolean           @default(false)
  isDelivery       Boolean           @default(false)
  isPickUp         Boolean           @default(false)
  isDineIn         Boolean           @default(false)
  isOnline         Boolean           @default(false)
  menuGroupAddOns  MenuGroupAddOns[]
  netPrice         String?
  price            String            @default("")
  gst              Float?
  gstType          GstType?
  chooseProfit     ChooseProfit?
  grossProfit      Float?
  grossProfitType  GrossProfitType?
  grossProfitPer   String?
  discountedPrice  String?
  ingredientCost   String?
  type             FoodRole
  sku              Float?
  images           Image[]
  orderItem        OrderItem[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  itemRecipeId     String?           @db.ObjectId
  itemRecipe       ItemRecipe?       @relation("ItemRecipeToMenu", fields: [itemRecipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  LoyaltyProgram   LoyaltyProgram[]  @relation("LoyaltyRewardToMenuItem")
  Tier             Tier[]

  @@index([categoryId])
  @@index([restaurantId])
}

enum GrossProfitType {
  INR
  PER
}

enum ChooseProfit {
  manualProfit
  itemRecipe
}

enum RecipeFor {
  MENU_ITEMS
  MENU_VARIANTS
  ADD_ONS
}

enum RecipeType {
  RECIPE
  PREP_RECIPE
}

model ItemRecipe {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId       String             @db.ObjectId
  restaurant         Restaurant         @relation("RestaurantToRecepies", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeFor          RecipeFor
  recipeType         RecipeType
  grossMargin        Float?
  itemPrice          Float?
  itemCost           Float?
  name               String             @default("")
  slug               String
  ingredients        RecipeIngredient[]
  createdBy          String?
  lastModifiedBy     String?
  menuId             String?
  menuItem           MenuItem[]         @relation("ItemRecipeToMenu")
  menuVariantId      String?
  menuItemVariant    MenuItemVariant[]  @relation("ItemRecipeToMenuVariant")
  addonItemVariantId String?
  addOnItemVariant   AddOnVariants[]    @relation("ItemRecipeToAddOnItemVariant")
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model RecipeIngredient {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  recipeId      String      @db.ObjectId
  recipe        ItemRecipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  rawMaterialId String      @db.ObjectId
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  quantity      Float
  unitId        String      @db.ObjectId
  unit          Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  wastage       Float       @default(0)
  cost          Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Variants {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  slug             String
  variantCategory  TypeVariants
  restaurantId     String            @db.ObjectId
  restaurant       Restaurant        @relation("RestaurantToVariants", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItemVariants MenuItemVariant[] @relation("VariantToMenuItemVariants")
  status           Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([restaurantId])
}

model MenuItemVariant {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  menuItemId      String           @db.ObjectId
  restaurantId    String           @db.ObjectId
  restaurant      Restaurant       @relation("RestaurantToMenuVariants", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItem        MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantId       String           @db.ObjectId
  variant         Variants         @relation("VariantToMenuItemVariants", fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  netPrice        String?
  price           String           @default("")
  gst             Float?
  gstType         GstType?
  chooseProfit    ChooseProfit?
  grossProfit     Float?
  grossProfitType GrossProfitType?
  grossProfitPer  String?
  foodType        FoodRole
  ingredientCost  String?
  itemRecipeId    String?          @db.ObjectId
  itemRecipe      ItemRecipe?      @relation("ItemRecipeToMenuVariant", fields: [itemRecipeId], references: [id])

  @@index([menuItemId])
  @@index([variantId])
}

enum TypeVariants {
  SIZE
  PORTION
  QUANTITY
  PORTION_SIZE
  CUSTOMIZATION
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  menuId    String   @db.ObjectId
  menu      MenuItem @relation(fields: [menuId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  urlId     String?
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([menuId])
}

model AddOns {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String            @db.ObjectId
  restaurant      Restaurant        @relation("RestaurantToAddOns", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuAddOnGroups MenuGroupAddOns[] @relation("AddOnsToMenuGroupAddOns")
  title           String
  slug            String
  description     String?
  status          Boolean           @default(true)
  addOnVariants   AddOnVariants[]
  minSelect       Float?
  maxSelect       Float?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([restaurantId])
}

model AddOnVariants {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  addonId         String           @db.ObjectId
  restaurantId    String           @db.ObjectId
  restaurant      Restaurant       @relation("RestaurantToAddOnVariants", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addon           AddOns           @relation(fields: [addonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name            String
  slug            String
  netPrice        String?
  price           String           @default("")
  gst             Float?
  gstType         GstType          @default(GST_0)
  type            FoodRole
  chooseProfit    ChooseProfit?
  grossProfit     Float?
  grossProfitType GrossProfitType?
  grossProfitPer  String?
  ingredientCost  String?
  itemRecipeId    String?          @db.ObjectId
  itemRecipe      ItemRecipe?      @relation("ItemRecipeToAddOnItemVariant", fields: [itemRecipeId], references: [id])

  @@index([addonId])
}

model MenuGroupAddOns {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  menuItemId      String   @db.ObjectId
  menuItem        MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addOnGroupId    String   @db.ObjectId
  minSelect       String?
  maxSelectString String?
  addOnGroups     AddOns   @relation("AddOnsToMenuGroupAddOns", fields: [addOnGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([menuItemId])
  @@index([addOnGroupId])
}

enum OrderType {
  EXPRESS
  DINEIN
  DELIVERY
  TAKEAWAY
}

enum OrderSessionStatus {
  ONPROGRESS
  COMPLETED
  CANCELLED
}

enum Platform {
  ADMIN
  POS
  ONLINE
  ZOMATO
  SWIGGY
}

enum PaymentMode {
  PHONEPE
  RAZORPAY
}

model OrderSession {
  id                   String                    @id @default(auto()) @map("_id") @db.ObjectId
  billId               String
  orders               Order[]
  username             String
  phoneNo              String?
  platform             Platform                  @default(POS)
  sessionStatus        OrderSessionStatus        @default(ONPROGRESS)
  orderType            OrderType
  active               Boolean                   @default(true)
  restaurantId         String                    @db.ObjectId
  restaurant           Restaurant                @relation("RestaurantToOrderSession", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId           String?                   @db.ObjectId
  customer             CustomerRestaurantAccess? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId              String?                   @db.ObjectId
  table                Table?                    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId              String?                   @db.ObjectId
  staff                Staff?                    @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId              String?                   @db.ObjectId
  admin                User?                     @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt            DateTime                  @default(now())
  discount             Float?
  deliveryAreaLat      Float?
  deliveryAreaLong     Float?
  deliveryRadius       Float?
  deliveryAreaType     String?
  deliveryAreaAddress  String?
  deliveryAreaCity     String?
  deliveryAreaState    String?
  deliveryAreaCountry  String?
  deliveryAreaPincode  String?
  deliveryAreaLandmark String?
  transactionId        String?
  paymentMode          PaymentMode?
  discountAmount       Float?
  loyaltRedeemPoints   Float?
  subTotal             Float?
  isPaid               Boolean?                  @default(false)
  invoiceUrl           String?
  createdBy            String?
  paymentMethod        PaymentMethod?
  amountReceived       Float? // Amount received in single payment
  gstAmount            Float?
  gstType              GstType?
  cgstAmount           Float?
  sgstAmount           Float?
  change               Float? // Change amount in single payment
  isSplitPayment       Boolean                   @default(false) // Flag indicating if payment is split
  splitPayments        SplitPayment[] // Relation to split payments
  updatedAt            DateTime                  @updatedAt
  CashTransaction      CashTransaction[]         @relation("OrderToTransaction")

  @@index([customerId])
  @@index([staffId])
  @@index([adminId])
  @@index([tableId])
  @@index([restaurantId])
}

// Model for split payments
model SplitPayment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  method         PaymentMethod // Payment method used
  amount         Float // Amount paid with this method
  orderSessionId String        @db.ObjectId
  orderSession   OrderSession  @relation(fields: [orderSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  note           String? // Optional note about this payment portion
  createdBy      String? // Who processed this payment
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([orderSessionId])
}

model PrintDetails {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String      @unique @db.ObjectId
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantName  String
  description     String?
  address         String
  GSTIN           String?
  fssaiNo         String?
  phoneNo         String
  email           String
  website         String?
  logo            String?
  footer          String?
  googleReviewUrl String?
  localPrintUrl   String?
  printFormat     PrintFormat @default(TEXT)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum PrintFormat {
  TEXT
  IMAGE
}

enum PaymentMethod {
  CASH
  UPI
  DEBIT
  CREDIT
  SPLIT
}

enum KOTStatus {
  NEW
  MODIFIED
  REPRINTED
  CANCELLED
}

model Order {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  active           Boolean
  orderSessionId   String         @db.ObjectId
  orderSession     OrderSession   @relation(fields: [orderSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  generatedOrderId String
  orderType        OrderType
  restaurantId     String         @db.ObjectId
  restaurant       Restaurant     @relation("RestaurantToOrder", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems       OrderItem[]
  note             String?
  totalGrossProfit Float?
  totalNetPrice    Float?
  gstPrice         Float?
  totalAmount      Float
  isPaid           Boolean
  kotStatus        KOTStatus      @default(NEW)
  paymentMethod    PaymentMethod? // The payment method if not split
  createdBy        String?
  staffId          String?        @db.ObjectId
  staff            Staff?         @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  orderStatus      OrderStatus    @default(INCOMMING)

  @@index([restaurantId])
  @@index([staffId])
  @@index([orderSessionId])
}

enum OrderStatus {
  INCOMMING
  PREPARING
  FOODREADY
  SERVED
  ONHOLD
  OUTFORDELIVERY
  COMPLETED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String               @db.ObjectId
  order           Order                @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuId          String               @db.ObjectId
  name            String
  strike          Boolean              @default(false)
  menuItem        MenuItem             @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gst             Float?
  netPrice        String?
  grossProfit     Float?
  originalRate    Int?
  quantity        Float
  isVariants      Boolean
  selectedVariant selectedSizeVariant?
  addOnSelected   AddOnSelected[]
  totalPrice      Int

  @@index([orderId])
  @@index([menuId])
}

model selectedSizeVariant {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  sizeVariantId String
  name          String
  type          FoodRole
  price         Int
  gst           Float?
  netPrice      String?
  grossProfit   Float?
  orderItemId   String?    @unique @db.ObjectId
  orderItem     OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AddOnSelected {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  addOnId                 String
  orderItemId             String                    @db.ObjectId
  orderItem               OrderItem                 @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selectedAddOnVariantsId SelectedAddOnVariantsId[]
}

model SelectedAddOnVariantsId {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  type                   FoodRole
  price                  Int
  selectedAddOnVariantId String        @db.ObjectId
  selectedId             String        @db.ObjectId
  AddOnSelected          AddOnSelected @relation(fields: [selectedId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([selectedId])
}

model Site {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  adminId      String       @db.ObjectId
  user         User?        @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  code         String?
  subdomain    String       @unique
  customDomain String?
  restaurants  Restaurant[] @relation("SiteToRestaurants")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([adminId])
}

model Otp {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  mobile  String   @unique
  otp     String
  expires DateTime
}

model Table {
  id                    String                    @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId          String                    @db.ObjectId
  restaurant            Restaurant                @relation("RestaurantToTable", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name                  String
  slug                  String
  shortCode             String
  capacity              String
  uniqueId              String
  inviteCode            String?
  qrcode                String?
  areaId                String                    @db.ObjectId
  areas                 Areas                     @relation("AreasToTable", fields: [areaId], references: [id])
  orderSession          OrderSession[]
  currentOrderSessionId String?
  staffId               String?                   @db.ObjectId
  staff                 Staff?                    @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId            String?                   @db.ObjectId
  customer              CustomerRestaurantAccess? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime                  @default(now())
  occupied              Boolean                   @default(false)

  @@index([restaurantId])
  @@index([staffId])
  @@index([areaId])
  @@index([customerId])
}

model Notification {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToNotification", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId      String?
  orderType    String?
  status       Boolean    @default(true)
  message      String
  createdAt    DateTime   @default(now())

  @@index([restaurantId])
}

model VendorCategory {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToVendorCategory", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  slug         String
  vendors      Vendor[]   @relation("VendorToVendorCategory")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}

model Vendor {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId  String               @db.ObjectId
  restaurant    Restaurant           @relation("RestaurantToVendor", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name          String
  slug          String
  categoryId    String?              @db.ObjectId
  contactName   String?
  phone         String?
  email         String?
  status        String               @default("ACTIVE")
  rating        Float?               @default(0)
  isContract    Boolean              @default(false)
  category      VendorCategory?      @relation("VendorToVendorCategory", fields: [categoryId], references: [id])
  contractRates VendorContractRate[] @relation("VendorToContractRate")
  expenses      Expenses[]
  purchases     Purchase[]           @relation("PurchaseToVendor")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@index([restaurantId])
}

model VendorContractRate {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  vendorId        String      @db.ObjectId
  vendor          Vendor      @relation("VendorToContractRate", fields: [vendorId], references: [id], onDelete: Cascade)
  rawMaterialId   String      @db.ObjectId
  rawMaterial     RawMaterial @relation("RawMaterialToContractRate", fields: [rawMaterialId], references: [id], onDelete: Cascade)
  rawMaterialName String
  unitId          String      @db.ObjectId
  unit            Unit        @relation(fields: [unitId], references: [id])
  unitName        String
  netRate         Float
  gstType         GstType
  taxAmount       Float
  totalRate       Float
  validFrom       DateTime
  validTo         DateTime
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([vendorId])
  @@index([rawMaterialId])
  @@index([unitId])
}

enum GstType {
  GST_0
  GST_5
  GST_12
  GST_18
  GST_28
}

enum PurchaseStatus {
  PROCESSED
  REQUESTED
  SETTLEMENT
  ACCEPTED
  COMPLETED
  RETURNED
  CANCELLED
}

model Purchase {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String          @db.ObjectId
  restaurant      Restaurant      @relation("RestaurantToPurchase", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceNo       String
  vendorId        String          @db.ObjectId
  vendor          Vendor          @relation("PurchaseToVendor", fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseItems   PurchaseItems[] @relation("PurchaseToPurchaseItems")
  purchaseStatus  PurchaseStatus  @default(PROCESSED)
  isPaid          Boolean?
  createdBy       String?
  paymentMethod   PaymentMethod?
  subTotal        Float?
  generatedAmount Float?
  totalAmount     Float?
  taxes           Float?
  invoiceType     String?
  invoiceUrl      String?
  billImageUrl    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Expenses        Expenses[]
}

model PurchaseItems {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  purchaseId       String      @db.ObjectId
  purchase         Purchase    @relation("PurchaseToPurchaseItems", fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rawMaterialId    String      @db.ObjectId
  rawMaterial      RawMaterial @relation("PurchaseItemToRawMaterial", fields: [rawMaterialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rawMaterialName  String
  purchaseUnitId   String      @db.ObjectId
  purchaseQuantity Float
  purchaseUnit     Unit        @relation("PurchaseItemToUnit", fields: [purchaseUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseUnitName String
  netRate          Float?
  gstType          GstType?
  taxAmount        Float?
  purchasePrice    Float?
}

enum ExpenseCategory {
  Ingredients
  Utilities
  Salaries
  Equipment
  Marketing
  Rent
  Miscellaneous
}

model Expenses {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String            @db.ObjectId
  restaurant      Restaurant        @relation("RestaurantToExpenses", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseId      String?           @db.ObjectId
  purchase        Purchase?         @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category        ExpenseCategory
  createdBy       String?
  attachments     String?
  date            DateTime
  restock         Boolean?
  vendorId        String?           @db.ObjectId
  vendor          Vendor?           @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentMethod   PaymentMethod?
  amount          Float
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  CashTransaction CashTransaction[] @relation("ExpenseToTransaction")

  @@index([restaurantId])
}

enum AlertType {
  LOW_STOCK
  ORDER_DELAY
  ORDER_NOTSERVED
  PAYROLL_PENDING
  PURCHASE_SETTLEMENT
  PURCHASE_ACTION_REQUIRED
}

enum AlertStatus {
  PENDING
  ACKNOWLEDGED
  RESOLVED
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Alert {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String        @db.ObjectId
  restaurant   Restaurant    @relation("RestaurantToAlert", fields: [restaurantId], references: [id], onDelete: Cascade)
  type         AlertType
  status       AlertStatus   @default(PENDING)
  priority     AlertPriority
  href         String?
  message      String
  metadata     Json? // Store related data (orderId, itemId, etc.)
  orderId      String? // Add specific fields for frequent queries
  itemId       String?
  payrollId    String?
  purchaseId   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([restaurantId])
  @@index([type])
  @@index([status])
}

model Report {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String       @db.ObjectId
  restaurant   Restaurant   @relation("RestaurantToReports", fields: [restaurantId], references: [id], onDelete: Cascade)
  userId       String
  reportType   ReportType
  format       ReportFormat
  dateRange    DateRange?
  reportData   Json?
  generatedBy  String?
  fileUrl      String?
  status       ReportStatus @default(PENDING)
  error        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model DateRange {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  endDate   DateTime
  reportId  String   @unique @db.ObjectId
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

enum ReportType {
  DAYREPORT
  SALES
  INVENTORY
  FINANCIAL
  STAFF
  CASHREGISTER
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model TargetMetrics {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId            String     @unique @db.ObjectId
  restaurant              Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  targetGrossProfit       Float      @default(30) // 30% target
  targetNetProfit         Float      @default(15) // 15% target
  targetFoodCost          Float      @default(30) // 30% target
  targetLaborCost         Float      @default(25) // 25% target
  targetOccupancyRate     Float      @default(70) // 70% target
  targetServiceTime       Float      @default(30) // 30 minutes target
  targetInventoryTurnover Float      @default(12) // 12 times per year
  targetCurrentRatio      Float      @default(1.5) // 1.5:1 target
  updatedAt               DateTime   @updatedAt
  createdAt               DateTime   @default(now())
}

enum RegisterStatus {
  OPEN
  CLOSED
  FORCE_CLOSED
}

enum CheckInStatus {
  STALE
  ACTIVE
  COMPLETED
  FORCE_CLOSED
}

enum CashTransactionType {
  CASH_IN
  CASH_OUT
}

enum TransactionSource {
  ORDER
  EXPENSE
  MANUAL
  SETTLEMENT
}

model CashRegister {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId       String            @db.ObjectId
  restaurant         Restaurant        @relation("RestaurantToCashRegister", fields: [restaurantId], references: [id], onDelete: Cascade)
  openedBy           String            @db.ObjectId
  staff              Staff?            @relation("StaffToCashRegister", fields: [openedBy], references: [id])
  user               User?             @relation("UserToCashRegister", fields: [openedBy], references: [id])
  openingBalance     Float
  closingBalance     Float?
  actualBalance      Float?
  openingUPIBalance  Float?
  closingUPIBalance  Float?
  openingCashBalance Float?
  closingCashBalance Float?
  openingCardBalance Float?
  closingCardBalance Float?
  discrepancies      Float?
  status             RegisterStatus    @default(OPEN)
  openingNotes       String?
  closingNotes       String?
  openedAt           DateTime          @default(now())
  closedAt           DateTime?
  transactions       CashTransaction[] @relation("RegisterToTransactions")
  checkIns           CheckInRecord[]   @relation("RegisterToCheckIn")
  denominations      Denomination?     @relation("RegisterToDenomination")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([restaurantId])
  @@index([openedBy])
}

model CashTransaction {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  registerId    String              @db.ObjectId
  register      CashRegister        @relation("RegisterToTransactions", fields: [registerId], references: [id], onDelete: Cascade)
  type          CashTransactionType
  source        TransactionSource   @default(MANUAL)
  amount        Float
  description   String
  orderId       String?             @db.ObjectId
  order         OrderSession?       @relation("OrderToTransaction", fields: [orderId], references: [id])
  expenseId     String?             @db.ObjectId
  expense       Expenses?           @relation("ExpenseToTransaction", fields: [expenseId], references: [id])
  paymentMethod PaymentMethod // CASH, UPI, CARD, etc.
  referenceId   String? // For linking to orders or other transactions
  performedBy   String              @db.ObjectId
  staff         Staff?              @relation("StaffToTransaction", fields: [performedBy], references: [id])
  user          User?               @relation("UserToTransaction", fields: [performedBy], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([registerId])
  @@index([performedBy])
}

model Denomination {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  registerId String       @unique @db.ObjectId
  register   CashRegister @relation("RegisterToDenomination", fields: [registerId], references: [id], onDelete: Cascade)
  note500    Int?
  note200    Int?
  note100    Int?
  note50     Int?
  note20     Int?
  note10     Int?
  coins      Float?
  coins2     Float?
  coins5     Float?
  total      Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

enum PrinterConnectionType {
  LAN
  WIFI
  BLUETOOTH
  USB
}

enum PrinterType {
  THERMAL
  DOT_MATRIX
  INKJET
}

enum PrinterStatus {
  ONLINE
  OFFLINE
  ERROR
  PAPER_OUT
  CONNECTING
}

enum PrintLocationType {
  KITCHEN
  BAR
  JUICE
  ICECREAM
  TANDOORI
  BILLDESK
  PACKING
}

// Join model for Printer and PrintLocation
model PrinterToLocation {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  printerId       String        @db.ObjectId
  printer         Printer       @relation(fields: [printerId], references: [id], onDelete: Cascade)
  printLocationId String        @db.ObjectId
  printLocation   PrintLocation @relation(fields: [printLocationId], references: [id], onDelete: Cascade)
  isDefault       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([printerId, printLocationId])
  @@index([printerId])
  @@index([printLocationId])
}

enum PrinterSize {
  MM_58
  MM_80
  MM_76
}

model Printer {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  model          String?
  manufacturer   String?
  connectionType PrinterConnectionType
  printerType    PrinterType           @default(THERMAL)
  status         PrinterStatus         @default(OFFLINE)

  // Connection details
  ipAddress     String? // For LAN/WIFI
  port          Int? // For LAN/WIFI
  macAddress    String? // For Bluetooth
  bluetoothName String? // For Bluetooth
  usbVendorId   String? // For USB
  usbProductId  String? // For USB

  // Printer settings
  paperWidth     PrinterSize @default(MM_58) // characters per line
  dpi            Int?
  defaultFont    String?
  cutPaper       Boolean     @default(true)
  openCashDrawer Boolean     @default(false)

  // Relationships
  restaurantId   String              @db.ObjectId
  restaurant     Restaurant          @relation("RestaurantToPrinter", fields: [restaurantId], references: [id], onDelete: Cascade)
  printLocations PrinterToLocation[] // Updated relation

  // Metadata
  isActive      Boolean   @default(true)
  lastConnected DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([restaurantId])
}

model PrintLocation {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  name         String // e.g., "KITCHEN", "BAR", "BILLING"
  description  String?
  type         PrintLocationType
  isActive     Boolean             @default(true)
  restaurantId String              @db.ObjectId
  restaurant   Restaurant          @relation("RestaurantToPrintLocation", fields: [restaurantId], references: [id], onDelete: Cascade)
  printers     PrinterToLocation[] // Updated relation
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@unique([restaurantId, name])
  @@index([restaurantId])
}

model PrintJob {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String
  printerId    String
  content      String
  options      Json?
  status       String   @default("pending") // pending, processing, completed, failed
  error        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([restaurantId, status])
}
