// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Restaurant {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  imageUrl              String                @default("https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cmVzdGF1cmFudHxlbnwwfHwwfHx8MA%3D%3D")
  adminId               String                @db.ObjectId()
  outletType            OutletType            @default(NONE)
  address               String?
  email                 String?
  phoneNo               String?
  restaurantName        String?
  GSTIN                 String?
  city                  String?
  state                 String?
  country               String?
  pincode               String?
  fcmToken              String?
  openTime              String?
  areaLat               String?
  areaLong              String?
  fssai                 String?
  orderRadius           Int?
  businessType          String?
  status                Boolean               @default(false)
  closeTime             String?
  isDelivery            Boolean               @default(false)
  isPickUp              Boolean               @default(false)
  isDineIn              Boolean               @default(false)
  onlinePortal          Boolean               @default(false)
  users                 User                  @relation("RestaurantToUsers", fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customers             Customer[]            @relation("RestaurantToCustomer")
  assets                Assets[]              @relation("RestaurantToAssets")
  categories            Category[]            @relation("RestaurantToCategory")
  units                 Unit[]                @relation("RestaurantToUnit")
  rawMaterialCategories RawMaterialCategory[] @relation("RestaurantToRawCategory")
  variants              Variants[]            @relation("RestaurantToVariants")
  addOns                AddOns[]              @relation("RestaurantToAddOns")
  menu                  MenuItem[]            @relation("RestaurantToMenu")
  menuVariansts         MenuItemVariant[]     @relation("RestaurantToMenuVariants")
  addOnVariants         AddOnVariants[]       @relation("RestaurantToAddOnVariants")
  rawMaterial           RawMaterial[]         @relation("RestaurantToRawMaterial")
  orders                Order[]               @relation("RestaurantToOrder")
  sites                 Site[]                @relation("RestaurantToSite")
  tables                Table[]               @relation("RestaurantToTable")
  staffs                Staff[]               @relation("RestaurantToStaffs")
  areas                 Areas[]               @relation("RestaurantToAreas")
  vendors               Vendor[]              @relation("RestaurantToVendor")
  purchases             Purchase[]            @relation("RestaurantToPurchase")
  invoice               Invoice?              @relation("RestaurantToInvoice")
  razorpayInfo          RazorpayIntegration?  @relation("RestaurantToRazorapy")
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  Areas                 Areas[]
  integrations          Integration[]         @relation("RestaurantToIntegration")
  notifications         Notification[]        @relation("RestaurantToNotification")
  orderSession          OrderSession[]        @relation("RestaurantToOrderSession")
  ItemRecipes           ItemRecipe[]          @relation("RestaurantToRecepies")
}

model RazorpayIntegration {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId      String     @unique @db.ObjectId
  restaurant        Restaurant @relation("RestaurantToRazorapy", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  acc_id            String?
  stakeholderId     String?
  productId         String?
  account_number    String?
  ifsc_code         String?
  activation_status String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Invoice {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToInvoice", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isGSTEnabled Boolean
  isPrefix     Boolean
  prefix       String?
  invoiceNo    Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([restaurantId])
}

enum Integrations {
  RAZORAPY
  ONLINEHUB
  ZOMATO
  SWIGGY
}

model Integration {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String       @db.ObjectId
  restaurant   Restaurant   @relation("RestaurantToIntegration", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         Integrations
  description  String?
  logo         String?
  link         String?
  status       Boolean
  connected    Boolean
  apiId        String?
  apiSecretKey String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([restaurantId])
}

enum SubscriptionPlan {
  FREETRIAL
  STARTER
  STANDARD
  PREMIUM
  ENTERPRISE
}

enum OutletType {
  RESTAURANT
  HYBRIDKITCHEN
  EXPRESS
  BAKERY
  CAFE
  FOODTRUCK
  NONE
}

enum UserRole {
  ADMIN
  ACCOUNTANT
  WAITER
  CHEF
  CUSTOMER
}

enum StaffActive {
  ACTIVE
  UNACTIVE
}

model Staff {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  active        StaffActive    @default(ACTIVE)
  name          String
  email         String         @unique
  emailVerified Boolean?
  password      String?
  phoneNo       String         @unique
  role          UserRole
  restaurantId  String         @db.ObjectId
  restaurant    Restaurant     @relation("RestaurantToStaffs", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderSession  OrderSession[]
  orders        Order[]
  table         Table[]
  payroll       Payroll[]
  allowances    String?
  deductions    String?
  payFrequency  PayFrequency   @default(MONTHLY)
  salary        String
  joinedDate    DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([restaurantId])
}

model Payroll {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  staffId      String        @db.ObjectId
  staff        Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amountPaid   String
  payDate      DateTime      @default(now())
  status       PayrollStatus @default(PENDING)
  payFrequency PayFrequency
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([staffId])
}

enum PayrollStatus {
  COMPLETED
  PENDING
}

enum PayFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model User {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  name               String                 @default("Owner Name")
  email              String                 @unique
  phoneNo            String?
  role               UserRole               @default(ADMIN)
  emailVerified      DateTime?
  providerAccountId  String?
  image              String?
  pan                String?
  fcmToken           String?
  isFreeTrial        Boolean                @default(true)
  address            String?
  hashedPassword     String?
  isTwoFactorEnabled Boolean                @default(false)
  twoFactorEnabled   TwoFactorConfirmation?
  onboardingStatus   Boolean                @default(false)
  restaurant         Restaurant[]           @relation("RestaurantToUsers")
  onboarding         OnboardingStatus?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  billings           SubscriptionBilling[]  @relation("BillingToUsers")
  accounts           Account[]              @relation("AccountToUser")
  sites              Site[]
  orderSession       OrderSession[]
}

model SubscriptionBilling {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  userId           String           @db.ObjectId
  user             User             @relation("BillingToUsers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isSubscription   Boolean
  subscriptionPlan SubscriptionPlan
  planType         PlanType
  paidAmount       Int
  subscribedDate   DateTime
  validDate        DateTime
  paymentId        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId])
}

model Subsciption {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  amount           Int
  subscriptionPlan SubscriptionPlan
  planType         PlanType
  minOutlet        String
  isPOS            Boolean
  isStaffPrime     Boolean
  isKOT            Boolean
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

enum PlanType {
  MONTHLY
  ANNUALLY
}

model OnboardingStatus {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentStep    String
  restaurantData Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum RestaurantType {
  DINEIN
  DELIVERY
  TAKEAWAY
}

model Customer {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  phoneNo        String          @unique
  email          String?
  role           UserRole        @default(CUSTOMER)
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  userType       RestaurantType?
  restaurantId   String          @db.ObjectId
  restaurant     Restaurant      @relation("RestaurantToCustomer", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  table          Table[]
  orderSession   OrderSession[]
  sessionStart   DateTime?
  sessionEnd     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([restaurantId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation("AccountToUser", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Assets {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToAssets", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  label        String
  imageUrl     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}

model Category {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToCategory", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  description  String?
  menuItems    MenuItem[] @relation("CategoryToMenu")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
}

model RawMaterialCategory {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String        @db.ObjectId
  restaurant   Restaurant    @relation("RestaurantToRawCategory", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  shortName    String?
  ramMaterial  RawMaterial[] @relation("RawCategoryToRawMaterial")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([restaurantId])
}

model Unit {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId      String          @db.ObjectId
  restaurant        Restaurant      @relation("RestaurantToUnit", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name              String
  description       String?
  purchaseUnits     PurchaseItems[] @relation("PurchaseItemToUnit")
  consumptionUnits  RawMaterial[]   @relation("UnitToConsumption")
  minimumStockUnits RawMaterial[]   @relation("UnitToMinimumStock")

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  RecipeIngredient RecipeIngredient[]

  @@index([restaurantId])
}

model RawMaterial {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId          String              @db.ObjectId
  restaurant            Restaurant          @relation("RestaurantToRawMaterial", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId            String              @db.ObjectId
  rawMaterialCategory   RawMaterialCategory @relation("RawCategoryToRawMaterial", fields: [categoryId], references: [id])
  consumptionUnitId     String              @db.ObjectId
  consumptionUnit       Unit                @relation("UnitToConsumption", fields: [consumptionUnitId], references: [id])
  minimumStockLevelUnit String              @db.ObjectId
  minimumStockUnit      Unit                @relation("UnitToMinimumStock", fields: [minimumStockLevelUnit], references: [id])
  // Basic fields
  name                  String
  shortcode             String?
  currentStock          String?
  minimumStockLevel     String?
  conversionFactor      String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  purchasedPrice        String?
  purchasedUnit         String?
  purchasedStock        String?
  purchasedPricePerItem String?
  lastPurchasedPrice    String?
  activePurchaseId      String?
  purchaseItems         PurchaseItems[]     @relation("PurchaseItemToRawMaterial")
  RecipeIngredient      RecipeIngredient[]

  @@index([consumptionUnitId])
  @@index([minimumStockLevelUnit])
  @@index([restaurantId])
  @@index([categoryId])
  @@index([consumptionUnitId, minimumStockLevelUnit])
}

model Areas {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToAreas", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  table        Table[]    @relation("AreasToTable")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@index([restaurantId])
}

enum FoodRole {
  VEG
  NONVEG
  EGG
  SOFTDRINKS
  ALCOHOL
  NONALCOHOLIC
  MILK
}

model MenuItem {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId     String            @db.ObjectId
  restaurant       Restaurant        @relation("RestaurantToMenu", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId       String            @db.ObjectId
  category         Category          @relation("CategoryToMenu", fields: [categoryId], references: [id])
  isFeatured       Boolean?          @default(false)
  isArchived       Boolean?          @default(false)
  name             String
  shortCode        String?
  description      String
  isVariants       Boolean           @default(false)
  menuItemVariants MenuItemVariant[]
  isAddons         Boolean           @default(false)
  isDelivery       Boolean           @default(false)
  isPickUp         Boolean           @default(false)
  isDineIn         Boolean           @default(false)
  isOnline         Boolean           @default(false)
  menuGroupAddOns  MenuGroupAddOns[]
  netPrice         String?
  price            String            @default("")
  gst              Float?
  chooseProfit     ChooseProfit?
  grossProfit      Float?
  grossProfitType  GrossProfitType?
  grossProfitPer   String?
  discountedPrice  String?
  ingredientCost   String?
  type             FoodRole
  images           Image[]
  orderItem        OrderItem[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  itemRecipe       ItemRecipe?       @relation("ItemRecipeToMenu")

  @@index([categoryId])
  @@index([restaurantId])
}

enum GrossProfitType {
  INR
  PER
}

enum ChooseProfit {
  manualProfit
  itemRecipe
}

enum RecipeFor {
  MENU_ITEMS
  MENU_VARIANTS
  ADD_ONS
}

enum RecipeType {
  RECIPE
  PREP_RECIPE
}

model ItemRecipe {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId       String             @db.ObjectId
  restaurant         Restaurant         @relation("RestaurantToRecepies", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeFor          RecipeFor
  recipeType         RecipeType
  grossMargin        Float?
  itemPrice          Float?
  itemCost           Float?
  ingredients        RecipeIngredient[]
  menuId             String?            @unique @db.ObjectId
  menuItem           MenuItem?          @relation("ItemRecipeToMenu", fields: [menuId], references: [id])
  menuVariantId      String?            @unique @db.ObjectId
  menuItemVariant    MenuItemVariant?   @relation("ItemRecipeToMenuVariant", fields: [menuVariantId], references: [id])
  addonItemVariantId String?            @unique @db.ObjectId
  addOnItemVariant   AddOnVariants?     @relation("ItemRecipeToAddOnItemVariant", fields: [addonItemVariantId], references: [id])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model RecipeIngredient {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  recipeId      String      @db.ObjectId
  recipe        ItemRecipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  rawMaterialId String      @db.ObjectId
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  quantity      Float
  unitId        String      @db.ObjectId
  unit          Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  cost          Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Variants {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  variantCategory  TypeVariants
  restaurantId     String            @db.ObjectId
  restaurant       Restaurant        @relation("RestaurantToVariants", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItemVariants MenuItemVariant[] @relation("VariantToMenuItemVariants")
  status           Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([restaurantId])
}

model MenuItemVariant {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  menuItemId      String           @db.ObjectId
  restaurantId    String           @db.ObjectId
  restaurant      Restaurant       @relation("RestaurantToMenuVariants", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuItem        MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantId       String           @db.ObjectId
  variant         Variants         @relation("VariantToMenuItemVariants", fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  netPrice        String?
  price           String           @default("")
  gst             Float?
  chooseProfit    ChooseProfit?
  grossProfit     Float?
  grossProfitType GrossProfitType?
  grossProfitPer  String?
  foodType        FoodRole
  ingredientCost  String?
  itemRecipe      ItemRecipe?      @relation("ItemRecipeToMenuVariant")

  @@index([menuItemId])
  @@index([variantId])
}

enum TypeVariants {
  SIZE
  PORTION
  QUANTITY
  PORTION_SIZE
  CUSTOMIZATION
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  menuId    String   @db.ObjectId
  menu      MenuItem @relation(fields: [menuId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  urlId     String?
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([menuId])
}

model AddOns {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId    String            @db.ObjectId
  restaurant      Restaurant        @relation("RestaurantToAddOns", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuAddOnGroups MenuGroupAddOns[] @relation("AddOnsToMenuGroupAddOns")
  title           String
  description     String?
  status          Boolean           @default(true)
  addOnVariants   AddOnVariants[]
  minSelect       String?
  maxSelectString String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([restaurantId])
}

model AddOnVariants {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  addonId        String      @db.ObjectId
  restaurantId   String      @db.ObjectId
  restaurant     Restaurant  @relation("RestaurantToAddOnVariants", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addon          AddOns      @relation(fields: [addonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name           String
  price          String
  type           FoodRole
  ingredientCost String?
  itemRecipe     ItemRecipe? @relation("ItemRecipeToAddOnItemVariant")

  @@index([addonId])
}

model MenuGroupAddOns {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  menuItemId      String   @db.ObjectId
  menuItem        MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addOnGroupId    String   @db.ObjectId
  minSelect       String?
  maxSelectString String?
  addOnGroups     AddOns   @relation("AddOnsToMenuGroupAddOns", fields: [addOnGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([menuItemId])
  @@index([addOnGroupId])
}

enum OrderType {
  EXPRESS
  DINEIN
  DELIVERY
  TAKEAWAY
}

enum OrderSessionStatus {
  ONPROGRESS
  COMPLETED
  CANCELLED
}

model OrderSession {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  billId        String
  orders        Order[]
  username      String
  phoneNo       String?
  sessionStatus OrderSessionStatus @default(ONPROGRESS)
  orderType     OrderType
  active        Boolean            @default(true)
  restaurantId  String             @db.ObjectId
  restaurant    Restaurant         @relation("RestaurantToOrderSession", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId    String?            @db.ObjectId
  customer      Customer?          @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId       String?            @db.ObjectId
  table         Table?             @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  staffId       String?            @db.ObjectId
  staff         Staff?             @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId       String?            @db.ObjectId
  admin         User?              @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime           @default(now())
  subTotal      String?
  isPaid        Boolean?           @default(false)
  invoiceUrl    String?
  createdBy     String?
  paymentMethod PaymentMethod?
  updatedAt     DateTime           @updatedAt

  @@index([customerId])
  @@index([staffId])
  @@index([adminId])
  @@index([tableId])
  @@index([restaurantId])
}

enum PaymentMethod {
  CASH
  UPI
  DEBIT
  CREDIT
}

model Order {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  active           Boolean
  orderSessionId   String       @db.ObjectId
  orderSession     OrderSession @relation(fields: [orderSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  generatedOrderId String
  orderType        OrderType
  restaurantId     String       @db.ObjectId
  restaurant       Restaurant   @relation("RestaurantToOrder", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems       OrderItem[]
  note             String?
  totalGrossProfit Float?
  totalNetPrice    Float?
  gstPrice         Float?
  totalAmount      String
  isPaid           Boolean
  createdBy        String?
  staffId          String?      @db.ObjectId
  staff            Staff?       @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  orderStatus      OrderStatus  @default(INCOMMING)

  @@index([restaurantId])
  @@index([staffId])
  @@index([orderSessionId])
}

enum OrderStatus {
  INCOMMING
  PREPARING
  FOODREADY
  SERVED
  ONHOLD
  OUTFORDELIVERY
  COMPLETED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String               @db.ObjectId
  order           Order                @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuId          String               @db.ObjectId
  name            String
  strike          Boolean              @default(false)
  menuItem        MenuItem             @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gst             Float?
  netPrice        String?
  grossProfit     Float?
  originalRate    Int?
  quantity        String
  isVariants      Boolean
  selectedVariant selectedSizeVariant?
  addOnSelected   AddOnSelected[]
  totalPrice      Int

  @@index([orderId])
  @@index([menuId])
}

model selectedSizeVariant {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  sizeVariantId String
  name          String
  type          FoodRole
  price         Int
  gst           Float?
  netPrice      String?
  grossProfit   Float?
  orderItemId   String?    @unique @db.ObjectId
  orderItem     OrderItem? @relation(fields: [orderItemId], references: [id])
}

model AddOnSelected {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  addOnId                 String
  orderItemId             String                    @db.ObjectId
  orderItem               OrderItem                 @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  selectedAddOnVariantsId SelectedAddOnVariantsId[]
}

model SelectedAddOnVariantsId {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  type                   FoodRole
  price                  Int
  selectedAddOnVariantId String        @db.ObjectId
  selectedId             String        @db.ObjectId
  AddOnSelected          AddOnSelected @relation(fields: [selectedId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([selectedId])
}

model Site {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToSite", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId      String     @db.ObjectId
  user         User?      @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subdomain    String     @unique
  customDomain String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([restaurantId])
  @@index([adminId])
}

model Otp {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  mobile  String   @unique
  otp     String
  expires DateTime
}

model Table {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId          String         @db.ObjectId
  restaurant            Restaurant     @relation("RestaurantToTable", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name                  String
  shortCode             String
  capacity              String
  uniqueId              String
  inviteCode            String?
  qrcode                String?
  areaId                String         @db.ObjectId
  areas                 Areas          @relation("AreasToTable", fields: [areaId], references: [id])
  orderSession          OrderSession[]
  currentOrderSessionId String?
  staffId               String?        @db.ObjectId
  staff                 Staff?         @relation(fields: [staffId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId            String?        @db.ObjectId
  customer              Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime       @default(now())
  occupied              Boolean        @default(false)

  @@index([restaurantId])
  @@index([staffId])
  @@index([areaId])
  @@index([customerId])
}

model Notification {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToNotification", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId      String?
  orderType    String?
  status       Boolean    @default(true)
  message      String
  createdAt    DateTime   @default(now())

  @@index([restaurantId])
}

model Vendor {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId String     @db.ObjectId
  restaurant   Restaurant @relation("RestaurantToVendor", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name         String
  purchases    Purchase[] @relation("PurchaseToVendor")

  @@index([restaurantId])
}

enum PurchaseStatus {
  PROCESSED
  REQUESTED
  ACCEPTED
  COMPLETED
  RETURNED
  CANCELLED
}

model Purchase {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  restaurantId   String          @db.ObjectId
  restaurant     Restaurant      @relation("RestaurantToPurchase", fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceNo      String
  vendorId       String          @db.ObjectId
  vendor         Vendor          @relation("PurchaseToVendor", fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseItems  PurchaseItems[] @relation("PurchaseToPurchaseItems")
  purchaseStatus PurchaseStatus  @default(PROCESSED)
  isPaid         Boolean?
  createdBy      String?
  paymentMethod  PaymentMethod?
  subTotal       String?
  totalAmount    String?
  taxes          String?
  invoiceType    String?
  invoiceUrl     String?
  billImageUrl   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PurchaseItems {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  purchaseId       String      @db.ObjectId
  purchase         Purchase    @relation("PurchaseToPurchaseItems", fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rawMaterialId    String      @db.ObjectId
  rawMaterial      RawMaterial @relation("PurchaseItemToRawMaterial", fields: [rawMaterialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rawMaterialName  String
  purchaseUnitId   String      @db.ObjectId
  purchaseQuantity String
  purchaseUnit     Unit        @relation("PurchaseItemToUnit", fields: [purchaseUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseUnitName String
  sgst             String?
  sgstPrice        String?
  cgstPice         String?
  cgst             String?
  totalPrice       String?
  purchasePrice    String?
}
